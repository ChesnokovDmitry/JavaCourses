Паттерн Factory Method / Abstract Factory.

Будем определять, к какому типу относится человек в зависимости от его возраста:
1. Для всех типов людей создай общий интерфейс Human.
2. Factory для мужчин и женщин.
Для этого создай пакет male / female, в котором создай классы KidBoy / KidGirl, TeenBoy / TeenGirl, Man / Woman.
Во всех этих классах реализуй интерфейс Human.
3. В каждом классе KidBoy / KidGirl, TeenBoy / TeenGirl создай свою публичную константу MAX_AGE с соответствующими значениями: 12, 19.
4. Сгенерируй автоматические методы toString для каждого класса KidBoy / KidGirl, TeenBoy / TeenGirl, Man / Woman. Получится "KidBoy{}"
5. Создай класс Solution с методом main.
6. Создай публичный класс MaleFactory / FemaleFactory в пакете male / female с публичным методом getPerson, который принимает один параметр int age (возраст) и возвращает нужный объект одного из классов, реализующих интерфейс Human.
7. Логика метода getPerson: используя константу MAX_AGE определи, какой класс соответствует переданному возрасту.
Например, age=4 соответствует мальчику (KidBoy), age=15 - подростку (TeenBoy), остальной возраст - взрослому мужчине.
8. В методе main класса Solution создай фабрику и вызови у нее метод getPerson три раза с такими параметрами: 99, 4, 15.

Выведи результат в консоль.
Вывод должен быть следующий:
Man{}
KidBoy{}
TeenBoy{}

Фабрика готова! Это паттерн Factory Method.



1. В корне задачи создай интерфейс AbstractFactory, в который вынеси общий в фабриках метод.
2. Реализуй интерфейс AbstractFactory в обеих фабриках.
3. В корне задачи создай класс FactoryProducer, в котором создай публичный статический энум HumanFactoryType со значениями MALE, FEMALE.
4. В FactoryProducer создай публичный статический метод getFactory с аргументом HumanFactoryType.
Этот метод должен возвращать одну из фабрик: для ключа MALE - MaleFactory, для FEMALE - FemaleFactory.

Это паттерн Abstract Factory.